{
	"info": {
		"_postman_id": "d3010e91-8b9e-4929-97a8-6056becf893d",
		"name": "VTEX Scheduler",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20302085",
		"_collection_link": "https://itglobers-apis.postman.co/workspace/VTEX-ITG~8d4550f0-f765-4051-9375-d0e17a784450/collection/20302085-d3010e91-8b9e-4929-97a8-6056becf893d?action=share&source=collection_link&creator=20302085"
	},
	"item": [
		{
			"name": "Create or Update Scheduler",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "VtexIdclientAutCookie",
						"value": "{{VtexIdclientAutCookie}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-VTEX-API-AppKey",
						"value": "{{X-VTEX-API-AppKey}}",
						"type": "text"
					},
					{
						"key": "X-VTEX-API-AppToken",
						"value": "{{X-VTEX-API-AppToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"return-app-ping\",\n    \"scheduler\": {\n        \"expression\": \"*/1 * * * *\",\n        \"endDate\": \"2100-01-01T23:30:00+00:00\"\n    },\n    \"request\": {\n        \"uri\": \"https://{{workspace}}--{{account}}.myvtex.com/_v/financial-commission/ping\",\n        \"method\": \"POST\",\n        \"headers\": {\n            \"cache-control\": \"no-store\",\n            \"pragma\": \"no-store\"\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/scheduler/{{workspace}}/:appName/?version=4",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"scheduler",
						"{{workspace}}",
						":appName",
						""
					],
					"query": [
						{
							"key": "version",
							"value": "4"
						}
					],
					"variable": [
						{
							"key": "appName",
							"value": "return-app"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get Scheduler",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "VtexIdclientAutCookie",
						"value": "{{VtexIdclientAutCookie}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-VTEX-API-AppKey",
						"value": "{{X-VTEX-API-AppKey}}",
						"type": "text"
					},
					{
						"key": "X-VTEX-API-AppToken",
						"value": "{{X-VTEX-API-AppToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/scheduler/{{workspace}}/:appName/:id?version=4",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"scheduler",
						"{{workspace}}",
						":appName",
						":id"
					],
					"query": [
						{
							"key": "version",
							"value": "4"
						}
					],
					"variable": [
						{
							"key": "appName",
							"value": "marketplace-financial-commission"
						},
						{
							"key": "id",
							"value": "dashboard-ping"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "List Schedulers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "VtexIdclientAutCookie",
						"value": "{{VtexIdclientAutCookie}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-VTEX-API-AppKey",
						"value": "{{X-VTEX-API-AppKey}}",
						"type": "text"
					},
					{
						"key": "X-VTEX-API-AppToken",
						"value": "{{X-VTEX-API-AppToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/scheduler/{{workspace}}/:appName/dashboard-ping?version=4",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"scheduler",
						"{{workspace}}",
						":appName",
						"dashboard-ping"
					],
					"query": [
						{
							"key": "version",
							"value": "4"
						}
					],
					"variable": [
						{
							"key": "appName",
							"value": "return-app"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Scheduler",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "VtexIdclientAutCookie",
						"value": "{{VtexIdclientAutCookie}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}api/scheduler/{{workspace}}/:appName/:id?version=4",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"scheduler",
						"{{workspace}}",
						":appName",
						":id"
					],
					"query": [
						{
							"key": "version",
							"value": "4"
						}
					],
					"variable": [
						{
							"key": "appName",
							"value": "marketplace-financial-commission"
						},
						{
							"key": "id",
							"value": "dashboard-ping"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://{{workspace}}--{{account}}.myvtex.com/"
		}
	]
}